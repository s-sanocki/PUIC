<html>

<head>
  <meta charset='utf-8' />
  <title>PUIC - Mapbox widget - POC</title>
  <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <link href="https://api.mapbox.com/mapbox-gl-js/v2.6.0/mapbox-gl.css" rel="stylesheet">
  <script src="https://api.mapbox.com/mapbox-gl-js/v2.6.0/mapbox-gl.js"></script>
  <script src="https://unpkg.com/@turf/turf@6/turf.min.js"></script>
  <script
    src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.2/mapbox-gl-geocoder.min.js"></script>
  <link rel="stylesheet"
    href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.2/mapbox-gl-geocoder.css" type="text/css">
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: Helvetica, Arial, sans-serif;
    }

    #map {
      position: absolute;
      top: 0;
      bottom: 0;
      width: 100%;
    }

    #control-panel {
      position: absolute;
      background: #fff;
      top: 0;
      left: 0;
      margin: 12px;
      padding: 20px;
      font-size: 12px;
      line-height: 1.5;
      z-index: 1;
    }

    h2 {
      padding: 0px;
      margin: 0px;
    }

    label {
      display: inline-block;
      width: 140px;
    }
  </style>
</head>

<body>

  <div id='map'></div>

  <div id="control-panel">
    <div>
      <h2>Filters</h2>
    </div>
    <div>
      <label>Revenue</label>
      <input id="radius" type="range" min="1" max="1000" step="10" value="200"></input>
      <span id="radius-value"></span>
    </div>
    <div>
      <label>Debt</label>
      <input id="coverage" type="range" min="1" max="1000" step="10" value="400"></input>
      <span id="coverage-value"></span>
    </div>
    <!-- <div>
      <label>Upper Percentile</label>
      <input id="upperPercentile" type="range" min="90" max="100" step="1" value="100"></input>
      <span id="upperPercentile-value"></span>
    </div> -->
  </div>

  <script>

    /* Given a query in the form "lng, lat" or "lat, lng"
    * returns the matching geographic coordinate(s) */
    const coordinatesGeocoder = function (query) {

      const matches = query.match(
        /^[ ]*(?:Lat: )?(-?\d+\.?\d*)[, ]+(?:Lng: )?(-?\d+\.?\d*)[ ]*$/i
      );
      if (!matches) {
        return null;
      }

      function coordinateFeature(lng, lat) {
        return {
          center: [lng, lat],
          geometry: {
            type: 'Point',
            coordinates: [lng, lat]
          },
          place_name: 'Lat: ' + lat + ' Lng: ' + lng,
          place_type: ['coordinate'],
          properties: {},
          type: 'Feature'
        };
      }

      const coord1 = Number(matches[1]);
      const coord2 = Number(matches[2]);
      const geocodes = [];

      if (coord1 < -90 || coord1 > 90) {
        // must be lng, lat
        geocodes.push(coordinateFeature(coord1, coord2));
      }

      if (coord2 < -90 || coord2 > 90) {
        // must be lat, lng
        geocodes.push(coordinateFeature(coord2, coord1));
      }

      if (geocodes.length === 0) {
        // else could be either lng, lat or lat, lng
        geocodes.push(coordinateFeature(coord1, coord2));
        geocodes.push(coordinateFeature(coord2, coord1));
      }

      return geocodes;
    };

    mapboxgl.accessToken = 'pk.eyJ1Ijoic3Nhbm9ja2kiLCJhIjoiY2t3NTB6bWdsMDJ6djMxbDViMTR5OG5waSJ9.Fby0ouQeXSNX8UUqzaoCmw';

    var map = new mapboxgl.Map({
      container: 'map',
      // style: 'mapbox://styles/mapbox/light-v9',
      style: 'mapbox://styles/mapbox/streets-v11',
      center: [-0.198465, 51.505538],
      zoom: 14,
      pitch: 40,
      antialias: true
    });

    map.addControl(
      new MapboxGeocoder({
        accessToken: mapboxgl.accessToken,
        localGeocoder: coordinatesGeocoder,
        zoom: 4,
        placeholder: 'Enter location...',
        mapboxgl: mapboxgl,
        reverseGeocode: true
      })
    );

    var dataUrl = 'https://raw.githubusercontent.com/s-sanocki/PUIC/master/Geomap/mapbox_circles_extrusion/heatmap-data.csv';

    map.on('load', function () {

      d3.csv(dataUrl).then(function (dataFetched) {

        var dataSource = {
          "type": "FeatureCollection",
          "features": []
        }

        dataFetched.forEach(function (dataRow) {
          dataSource.features.push(turf.point([dataRow.lng, dataRow.lat], { height: parseInt(dataRow.height), color: dataRow.color }));
        })

        map.addSource("coordinates", {
          "type": "geojson",
          "data": dataSource
        });

      });

      map.addLayer({
        'id': 'extrusion',
        'type': 'fill-extrusion',
        "source": {
          "type": "geojson",
          "data": {
            "type": "FeatureCollection",
            "features": []
          }
        },
        'paint': {
          // 'fill-extrusion-color': '#00f',
          'fill-extrusion-color': ['get', 'color'],
          'fill-extrusion-height': ['get', 'height'],
          'fill-extrusion-base': 0,
          'fill-extrusion-opacity': 0.9
        }
      });

      //popup
      var popup = new mapboxgl.Popup({
        closeButton: false,
        closeOnClick: false,
        anchor: 'top',
      });

      map.on("mousemove", function (e) {

        var coordinates = [e.lngLat.lng, e.lngLat.lat];

        var query = map.queryRenderedFeatures(e.point, {
          layers: ["extrusion"]
        });

        if (query.length) {
          var properties = query[0].properties;
          var html = "<h3>" + "Amount: " + properties.height + "</h3>";
          popup.setLngLat(coordinates)
            .setHTML(html)
            .addTo(map);
        } else {
          if (popup.isOpen() === true) {
            popup.remove();
          }
        }

      })

      map.on('sourcedata', function (e) {
        if (e.sourceId !== 'coordinates') return
        if (e.isSourceLoaded !== true) return

        var data = {
          "type": "FeatureCollection",
          "features": []
        }

        e.source.data.features.forEach(function (f) {
          var object = turf.centerOfMass(f)
          var center = object.geometry.coordinates
          var radius = 25;
          var options = {
            steps: 6,
            units: 'meters',
            properties: f.properties
          };
          data.features.push(turf.circle(center, radius, options))
        })
        map.getSource('extrusion').setData(data);
      })

    });

  </script>